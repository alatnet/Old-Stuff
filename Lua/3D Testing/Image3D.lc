--[[
3D Image Luaplayer Class\Library  Ver. 1.0
Created By: alatnet
Dev Team X Productions
]]--

Image3D = {}

function Image3D.ImgPlane(xo,yo,w,h)
  local c = Color.new(255,255,255)
  local s
  
  if w >= h then
    s = w
  elseif h >= w then
    s = h
  end
  
  local verts = {
    {0,0,c,-xo,-yo,0}, --1
    {0,1,c,s-xo,-yo,0}, --2
    {1,0,c,-xo,s-yo,0}, --3
    {1,1,c,s-xo,s-yo,0} --4
  }
  return verts
end

Image3D.DefaultTexFunc = function ()
  Gu.texFunc(Gu.TFX_BLEND,Gu.TCC_RGBA) --TFX_MODULATE TFX_DECAL TFX_BLEND TFX_REPLACE TFX_ADD
  Gu.texEnvColor(Color.new(255,255,255,255))
  Gu.texFilter(Gu.NEAREST_MIPMAP_NEAREST,Gu.LINEAR_MIPMAP_LINEAR)
  Gu.texScale(1, 1)
  Gu.texOffset(0, 0)

  if _G.Gu["texWrap"] ~= nil then
    Gu.texWrap(Gu.CLAMP,Gu.CLAMP)
  end

  --if _G.Gu["texProjMapMode"] ~= nil then
  --  Gu.texProjMapMode(Gu.POSITION)
  --end
end

function Image3D.new(img,func)
  if type(img) ~= "string" then
    error("bad argument #1: (string expected, got " .. type(img) ..")",2)
  end
  
  func = func or Image3D.DefaultTexFunc
  if type(func) ~= "function" then
    error("bad argument #2: (function expected, got " .. type(func) ..")",2)
  end
  
  img = Image.load(img)
  
  local c = setmetatable(
    {
      IMG = img,
      FUNC = func,
      ROT = {
        x = 180*(Gu.PI/180),
        y = 0*(Gu.PI/180),
        z = 0*(Gu.PI/180)
      },
      SIZE = {
        IMG = {
          w = img:width(),
          h = img:height()
        },                                                                 
        PLANE = {
          w = img:width(),
          h = img:height()
        }
      },
      OFFSET = {
        x = 0,
        y = 0
      }
    },
    {
      __index = Image3D
    }
  )

  return c
end

function Image3D.newBlank(width,height,func)
  width = width or 1
  height = height or 1

  if type(func) ~= "function" then
    error("bad argument #1: (function expected, got " .. type(func) ..")",2)
  end

  func = func or Image3D.DefaultTexFunc
  
  local c = setmetatable(
    {
      IMG = Image.createEmpty(width,height),
      FUNC = func,
      ROT = {
        x = 180*(Gu.PI/180),
        y = 0*(Gu.PI/180),
        z = 0*(Gu.PI/180)
      },
      SIZE = {
        IMG = {
          w = width,
          h = height
        },                                                                 
        PLANE = {
          w = width,
          h = height
        }
      },
      OFFSET = {
        x = 0,
        y = 0
      }
    },
    {
      __index = Image3D
    }
  )

  return c
end

function Image3D:TexFunc(func)
  if type(func) ~= "function" then
    error("bad argument #1: (function expected, got " .. type(func) ..")",2)
  end
  
  self.FUNC = func
end

function Image3D:Size(w,h)
  if w == nil or h == nil then
    return self.SIZE.PLANE.w,self.SIZE.PLANE.h
  else
    self.SIZE.PLANE.w = w
    self.SIZE.PLANE.h = h
  end
end

function Image3D:width()
  return self.SIZE.PLANE.w
end

function Image3D:height()
  return self.SIZE.PLANE.h
end

function Image3D:Image()
  return self.IMG
end

function Image3D:Center(x,y)
  if x == nil or y == nil then
    return self.OFFSET.x,self.OFFSET.y
  else
    self.OFFSET.x = x
    self.OFFSET.y = y
  end
end

function Image3D:rotateXYZ(x,y,z)
  if x == nil or y == nil or z == nil then
    return self.ROT.x,self.ROT.y,self.ROT.z
  else
    self.ROT.x = x
    self.ROT.y = y
    self.ROT.z = z
  end
end

function Image3D:Draw(x,y,z)
  Gu.enable(Gu.TEXTURE_2D)
  
  if _G.Gu["texMode"] ~= nil then
    Gu.texMode(Gu.PSM_8888,0,Gu.FALSE)
  end
  Gu.texImage(img)
  self.FUNC()
  
  -- setup matrix for img
  Gum.matrixMode(Gu.MODEL)
  Gum.loadIdentity()
  Gum.translate(x, y, z)
  Gum.rotateXYZ(self.ROT.x,self.ROT.y,self.ROT.z) --*(Gu.PI/180)
  
  -- draw img
  Gum.drawArray(Gu.TRIANGLE_STRIP, Gu.TEXTURE_32BITF+Gu.COLOR_8888+Gu.VERTEX_32BITF+Gu.TRANSFORM_3D, Image3D.ImgPlane(self.OFFSET.x,self.OFFSET.y,self.SIZE.PLANE.w,self.SIZE.PLANE.h))
end

--[[
function Image3D:
end
]]--