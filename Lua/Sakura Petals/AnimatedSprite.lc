--[[
Animated Sprite Luaplayer Class\Library  Ver. 1.0
Created By: alatnet
Dev Team X Productions
]]--

AnimatedSprite = {
  _LOADED = {}
}

function AnimatedSprite.new(img,Num_Sprites_Vertical,Num_Sprites_Horizontal,freq)
  if type(img) == "string" then
    if AnimatedSprite._LOADED[img] == nil then
      AnimatedSprite._LOADED[img] = assert (Image.load(img),"Invalid path to Image.")
    end
  else
    error(2,"argument 1: String expected, got " .. type(img))
  end
  
  --[[
  if type(img)=="string" then
    if AnimatedSprite._LOADED[img] == nil then
      AnimatedSprite._LOADED[img] = assert (Image.load(img),"Invalid path to Image.")
    end
  else
    assert(img,"argument 1: Image or String required, got " .. type(img)) --"No Image supplied or passed something other than an image!")
  end
  ]]--

  Num_Sprites_Horizontal = Num_Sprites_Horizontal or 1
  Num_Sprites_Vertical = Num_Sprites_Vertical or 1
  freq = freq or 1000

  local num_rows = Num_Sprites_Vertical   --rows are y axis
  local num_cols = Num_Sprites_Horizontal     --cols are x axis

  local c = setmetatable(
    {
      IMG = img,
      ROWS = num_rows,
      COLS = num_cols,
      interval = freq,
      frame = {
        curr = 1,
        max = num_rows*num_cols,
        x = 0,
        y = 0,
        width = AnimatedSprite._LOADED[img]:width()/num_cols,
        height = AnimatedSprite._LOADED[img]:height()/num_rows
      },
      pause = false,
      timer = Timer.new(),
      reverse = false
    },
    {
      __index = AnimatedSprite
    }
  )
--[[
  if freq <= -1 then
    c.timer:start()
  end
]]--
  return c
end

function AnimatedSprite.addImage2List(img,name)
  if type(img) == "string" then
    if type(name) == "string" then
      AnimatedSprite._LOADED[name] = Image.load(img)
    else
      error(2,"argument 2: String expected, got " .. type(name))
    end
  else
    error(2,"argument 1: Path expected, got " .. type(img))
  end
end

function AnimatedSprite.purgeList()
  AnimatedSprite._LOADED = {}
  collectgarbage()
end

function AnimatedSprite:shiftFrame(val)
  if val == 1 then
    self.frame.curr = self.frame.curr + 1
    self.frame.x = self.frame.x + self.frame.width
    if self.frame.x >= AnimatedSprite._LOADED[self.IMG]:width() then
      self.frame.x = 0
      self.frame.y = self.frame.y + self.frame.height
    end
    if self.frame.y >= AnimatedSprite._LOADED[self.IMG]:height() then
      self.frame.x = 0
      self.frame.y = 0
      self.frame.curr = 1
    end
  elseif val == -1 then
    self.frame.curr = self.frame.curr - 1
    self.frame.x = self.frame.x - self.frame.width
    if self.frame.x < 0 then
      self.frame.x = AnimatedSprite._LOADED[self.IMG]:width() - self.frame.width
      self.frame.y = self.frame.y - self.frame.height
    end
    if self.frame.y < 0 then
      self.frame.x = AnimatedSprite._LOADED[self.IMG]:width() - self.frame.width
      self.frame.y = AnimatedSprite._LOADED[self.IMG]:height() - self.frame.height
      self.frame.curr = self.frame.max
    end
  elseif val > 0 then
    for i=1,val do
      self.frame.x = self.frame.x + self.frame.width
      self.frame.curr = self.frame.curr + 1
      if self.frame.x >= AnimatedSprite._LOADED[self.IMG]:width() then
        self.frame.x = 0
        self.frame.y = self.frame.y + self.frame.height
      end
      if self.frame.y >= AnimatedSprite._LOADED[self.IMG]:height() then
        self.frame.x = 0
        self.frame.y = 0
      end
    end
  elseif val < 0 then
    val = val * -1
    for i=1,val do
      self.frame.x = self.frame.x - self.frame.width
      self.frame.curr = self.frame.curr - 1
      if self.frame.x < 0 then
        self.frame.x = AnimatedSprite._LOADED[self.IMG]:width() - self.frame.width
        self.frame.y = self.frame.y - self.frame.height
      end
      if self.frame.y < 0 then
        self.frame.x = AnimatedSprite._LOADED[self.IMG]:width() - self.frame.width
        self.frame.y = AnimatedSprite._LOADED[self.IMG]:height() - self.frame.height
      end
    end
  end
end

function AnimatedSprite:getFreq()
  return self.interval
end

function AnimatedSprite:setFreq(freq)
  freq = freq or 1000

  if self.interval ~= -1 then
    if not (freq <=-1) then
      self.timer:reset()
    else
      self.timer:stop()
    end
  else
    self.timer:stop()
  end
  
  if freq <= -1 then freq = -1 end

  self.interval = freq

  --[[
  if self.interval == -1 then
    if freq ~= -1 then
      self.timer:start()
    end
  end
  self.interval = freq
  ]]--
end

function AnimatedSprite:getImage()
  return AnimatedSprite._LOADED[self.IMG]
  --return self.IMG
end

function AnimatedSprite:setImage(img,Num_Sprites_Vertical,Num_Sprites_Horizontal,freq)
  if type(img) == "string" then
    if AnimatedSprite._LOADED[img] ~= nil then
      self.IMG = img
    else
      if AnimatedSprite._LOADED[img] == nil then
        AnimatedSprite._LOADED[img] = assert (Image.load(img),"Invalid path to Image.")
        self.IMG = img
      end
    end
  else
    error(2,"argument 1: String expected, got " .. type(img))
  end
  --[[
  if type(img) == "string" then
    error(2,"argument 1: Image reqired, got String.")
  else
    assert(img,"argument 1: Image required, got " .. type(img)) --"No Image supplied or passed something other than an image!")
  end
  ]]--

  Num_Sprites_Horizontal = Num_Sprites_Horizontal or 1
  Num_Sprites_Vertical = Num_Sprites_Vertical or 1
  freq = freq or 1000

  local num_rows = Num_Sprites_Vertical   --rows are y axis
  local num_cols = Num_Sprites_Horizontal     --cols are x axis
  
--  self.IMG = img
  self.ROWS = num_rows
  self.COLS = num_cols
  self.interval = freq
  self.frame.curr = 1
  self.frame.max = num_rows*num_cols
  self.frame.x = 0
  self.frame.y = 0
  self.frame.width = AnimatedSprite._LOADED[img]:width()/num_cols
  self.frame.height = AnimatedSprite._LOADED[img]:height()/num_rows
end

function AnimatedSprite:getSpriteFromPos(x,y,FromFrameFunc)
  x = x or 0
  y = y or 0
  FromFrameFunc = FromFrameFunc or false

  if x < 0 or y < 0 or x > self.COLS or y > self.ROWS then
    if FromFrameFunc then
      error(3,"Frame out of bounds")
    else
      error(2,"Position out of bounds.")
    end
  end

  local image = Image.createEmpty(self.frame.width,self.frame.height)
  image:clear(Color.new(256,256,256,0))
  --image:blit(0, 0, self.IMG, x * self.frame.width, y * self.frame.height, self.frame.width, self.frame.height,true)
  image:blit(0, 0, AnimatedSprite._LOADED[self.IMG], x * self.frame.width, y * self.frame.height, self.frame.width, self.frame.height,true)
  return image
end

function AnimatedSprite:getSpriteFromFrame(val)
  val = val or 1
  
  if val == 1 then
    return self:getSpriteFromPos(0,0,true)
  end

  local x=0
  local y=0

  for i=1,val do
    x = x + 1
    if x > self.COLS then
      x=0
      y=y+1
    end
  end

  return self:getSpriteFromPos(x,y,true)
end

function AnimatedSprite:setPause(val)
  self.pause = val
end

function AnimatedSprite:isPause()
  return self.pause
end

function AnimatedSprite:setReverse(val)
  self.reverse = val
end

function AnimatedSprite:isReverse()
  return self.reverse
end

function AnimatedSprite:getWidth()
  return self.frame.width
end

function AnimatedSprite:getHeight()
  return self.frame.height
end

function AnimatedSprite:getCurrFrame()
  return self.frame.curr
end

function AnimatedSprite:setCurrFrame(val)
  if val <= 1 or val > self.frame.max then
    self.frame.x = 0
    self.frame.y = 0
    self.frame.curr = 1
  elseif val == self.frame.max then
    self.frame.curr = self.frame.max
    self.frame.x = self.frame.width * self.COLS
    self.frame.y = self.frame.height * self.ROWS
  else
    self:shiftFrame(val - self.frame.curr)
    --[[
    if val > self.frame.curr then
      while self.frame.curr ~= val do self:shiftFrame(1) end
    elseif val < self.frame.curr then
      while self.frame.curr ~= val do self:shiftFrame(-1) end
    end
    ]]--

    --[[
    self.frame.x = 0
    self.frame.y = 0
    self.frame.curr = 1
    for i=1,val do
      self.frame.x = self.frame.x + self.frame.width
      if self.frame.x >= self.IMG:width() then
        self.frame.x = 0
        self.frame.y = self.frame.y + self.frame.height
      end
      if self.frame.curr > self.frame.max then
        self.frame.curr = 1
        self.frame.x = 0
        self.frame.y = 0
        break
      end
    end
    ]]--
  end
end

function AnimatedSprite:checkCollision(x,y,Obj_x,Obj_y,Obj_w,Obj_h)
  local x1 = x
  local y1 = y
  local w1 = self.frame.width
  local h1 = self.frame.height

  local x2 = Obj_x
  local y2 = Obj_y
  local w2 = Obj_w
  local h2 = Obj_h

  if ((x1 >= x2 and x1 <= x2 + w2) or (x1+w1 >= x2 and x1+w1 <= x2 + w2) or (x1 >= x2 and x1+w1 <= x2+w2)) and (y1+h1 >= y2 and y1 <= y2) then  -- Top Collision
    return 1
  elseif ((x1 >= x2 and x1 <= x2 + w2) or (x1+w1 >= x2 and x1+w1 <= x2 + w2) or (x1 >= x2 and x1+w1 <= x2+w2)) and (y1 <= y2+h2 and y1+h1 >= y2+h2) then  -- Bottom Collision
    return 2
  elseif ((y1 >=y2 and y1 <= x2 + h2) or (y1+h1 >= y2 and y1+h1 <= y2 + h2) or (y1>=y2 and y1+h1 <= y2+h2)) and (x1+w1 >= x2 and x1 <= x2) then -- Left Collision
    return 3
  elseif ((y1 >=y2 and y1 <= x2 + h2) or (y1+h1 >= y2 and y1+h1 <= y2 + h2) or (y1>=y2 and y1+h1 <= y2+h2)) and (x1 <= x2+w1 and x1+w1 >= x2+w2) then -- Right Collision
    return 4
  end

  return 0
end

function AnimatedSprite:Draw(x,y,s)
  s = s or screen
  x = x or 0
  y = y or 0

  if self.interval ~= -1 then
    if not self.pause then
      if self.timer:start() >= self.interval then
        if reverse then
          self:shiftFrame(-1)
        else
          self:shiftFrame(1)
        end
        self.timer:reset()
      end
    else
      self.timer:stop()
    end
  else
    self.timer:stop()
  end

  --s:blit(x, y, self.IMG, self.frame.x, self.frame.y, self.frame.width, self.frame.height,true)
  s:blit(x, y, AnimatedSprite._LOADED[self.IMG], self.frame.x, self.frame.y, self.frame.width, self.frame.height,true)
end